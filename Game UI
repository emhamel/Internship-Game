package game_level1;
 
import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.*;
import java.util.*;
import java.util.Timer;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.net.Socket;
import java.net.SocketException;
import java.util.logging.Level;
import java.util.logging.Logger;
 
//this is where the data is collect to send to the client
class metrics{
    //singleton is used to connect one instance of metrics to multiple other classes
    public static metrics m = new metrics();
   
    Timer timer = new Timer();
    Socket socket;
    DataInputStream inputStream;
    DataOutputStream outputStream;
    public long startTime;
  
    public int mouseCorrectClicks = 1;
    public int mouseClicks = 1;
    public int mouseIncorrectClicks = 1;
    public int enemiesPrevailed = 1;
   
    //this collects the nanoseconds at the start of the program
    //this helps us calculate time markers to indicate when the data was collected
    public long startTime(long st){
        this.startTime = st;
        return startTime;
    }
   
    //this returns the currect coordintes of the moveable border
    //this will help us caluclate new coordinates of the alloted space
    public Double[] currectCoordinates(double x, double y){
        Double [] coordinates = {x, y};
        return coordinates;
    }
  
    //This indicates when the data was taken, which is important when analyzing trends
    //in one's stress and accuracy
    public double time(){
        long sysTime = System.nanoTime();
        long timeElapsed = sysTime - m.startTime;
        double seconds = (double)timeElapsed / 1000000000.0;
        BigDecimal tim = new BigDecimal(seconds);
        tim = tim.setScale(2, RoundingMode.HALF_UP);
        double time = tim.doubleValue();
        return time;
    }
}
 
//This is where the client connects to the server and sends data
class client_connect{
    public double x;
    public double y;
    Timer timer = new Timer();
    Socket socket;
    DataInputStream inputStream;
    DataOutputStream outputStream;
      
        public void server(String hostName, int portNumber) throws IOException {
            socket = new Socket(hostName, portNumber);
            inputStream = new DataInputStream(socket.getInputStream());
            outputStream = new DataOutputStream(socket.getOutputStream());
           
            //This is threaded because we want to continuously send data to the server
            class thread extends Thread {
            @Override
            public void run() {
                 try {
                     //outputStream sends data to server
                    outputStream.writeInt(metrics.m.mouseCorrectClicks);
                    outputStream.writeInt(metrics.m.mouseIncorrectClicks);
                    outputStream.writeInt(metrics.m.enemiesPrevailed);
                    outputStream.writeDouble(metrics.m.time());
                    //This sends the currect X and Y of the moveable border
                    outputStream.writeDouble(DrawPlayingField.playingfield.x);
                    outputStream.writeDouble(DrawPlayingField.playingfield.y);
                   
                    //inputStream returnsnew X and Y coordinates for the moveable border
                    double new_x = inputStream.readDouble();
                    double new_y = inputStream.readDouble();
                   
                    //This method makes the new X and Y coordinates from the server accessable
                    //to the DrawBorder class.  This currectly only returns THIS players X and Y coordinates
                    //but should be adjusted to return the new coordinates of ALL players.
                    XY(new_x, new_y);
                       
                 // This catches all the Socket Exceptions
                 } catch (SocketException e) {
                    System.out.print("SocketException Caught :" + e);
                 } catch (EOFException eof) {
                     System.out.println("EOFException: " + eof);
                 } catch (IOException ex) {
                     Logger.getLogger(metrics.class.getName()).log(Level.SEVERE, null, ex);
                 }
               }
            }
            //This calls a new data-sending thread ever few seconds
            TimerTask talkToServer = new TimerTask() {
            @Override
            public void run() {
                Thread thread = new thread();
                thread.start();
            }
        };
            timer.schedule(talkToServer, 1000, 4000);
        }
       
        //This method makes the new X and Y coordinates from the server accessable
        //to the DrawBorder class
        public void XY(double new_x, double new_y){
            x = new_x;
            y = new_y;
    }
}  
 
//This draws the playingfield
class DrawPlayingField extends GameLevel1 {
   
    public static DrawPlayingField playingfield = new DrawPlayingField();
   
    //x and y are the coordinates of this player's boarder
    //for this player (player 1), the start coordinates are X = 40.0 and Y = 275.0
    //These numbers will change depending on THIS player's metrics
    public double x = 40.0;
    public double y = 275.0;
   
    //These are the start X and Y coordinates of the other players boarders
    //These will change depending on the OTHER player's metrics
    public double a = 290.0;
    public double b = 525.0;
    public double c = 540.0;
    public double d = 275.0;
    public double e = 290.0;
    public double f = 25.0;
    @Override
    public void paint(Graphics g) {
        Graphics2D g2 = (Graphics2D) g;
        Color red = new Color(255, 0, 0);
        Color blue = new Color(10, 0, 240);
       
        g.drawOval(53, 37, 475, 475);
        g.drawOval(185, 170, 210, 210);
        double marginx = this.getWidth() - 20.0;
        double marginy = this.getHeight() - 25.0;
        double x_scale = (marginx / 11.0);
        double y_scale = (marginy / 11.0);
        Shape rect = new Rectangle2D.Double(15.0, 15.0, marginx - 15.0, marginy - 15.0);
        g2.draw(rect);
       
        //this calculates the scale of the playingfeild on the X axis
        for (double i = 25.0; i <= marginx; i = i + x_scale + 2.0) {
            Shape line = new Line2D.Double(i, marginy - 5.0, i, marginy);
            Shape line2 = new Line2D.Double(i, 15.0, i, 20.0);
            int str1 = (int) (Math.floor(i * 20 / 543 - 10.0736648));
            String scale = "" + str1;
            g2.draw(line);
            g2.draw(line2);
            g2.drawString(scale, (int) i, 550);
        }
        //this calculates the scale of the playingfeild on the Y axis
       for (double i = 30.0; i <= marginy; i = i + y_scale) {
            Shape line = new Line2D.Double(marginx, i, marginx - 5.0, i);
            Shape line2 = new Line2D.Double(20.0, i, 15.0, i);
            int str1 = (int) Math.round((i * -20 / 485) + 11.2371134);
            String scale = "" + str1;
            g2.draw(line);
            g2.draw(line2);
            g2.drawString(scale, 0, (int) i);
        }
      
       //These are the lines showing the boundary lines of the player's areas
       // All of these should change depending on changes in this players and other players stress
       //and accuracy
        Shape border1 = new Line2D.Double(x, y, 290, 275);
        Shape border2 = new Line2D.Double(a, b, 290, 275);
        Shape border3 = new Line2D.Double(c, d, 290, 275);
        Shape border4 = new Line2D.Double(e, f, 290, 275);
       
        //This is to visually indicate where the center of the circle is
        Shape targetComponent1 = new Line2D.Double(280, 265, 300, 285);
        Shape targetComponent2 = new Line2D.Double(280, 285, 300, 265);
 
        g2.setColor(red);
        g2.draw(border1);
        g2.draw(border2);
        g2.draw(border3);
        g2.draw(border4);
        g2.setColor(blue);
        g2.draw(targetComponent1);
        g2.draw(targetComponent2);
    }
   
    // This must be changed to include the X and Y coordinates of other players borders as well
    public void change_XY(double x, double y){
        this.x = x;
        this.y = y;
        metrics.m.currectCoordinates(x, y);
    }
}
 
//This class is draws and moves the enemy figures
class DrawEnemies extends DrawPlayingField {
   
    // angle, enemy_x, and enemy_y calculate the start point of the enemy around
    // the circle
    double angle = Math.random() * Math.PI * 2;
    public double enemy_x = (Math.cos(angle) * 260) + 286.0;
    public double enemy_y = (Math.sin(angle) * 260) + 271.0;
   
    // x_slope, y_slope, slope and step all help calulcate the enemies trajectory
    //to the center of the circle.  Each enemy will have a different speed depending on the slope
    double x_slope = 290 - enemy_x;
    double y_slope = 275 - enemy_y;
    double slope = y_slope / Math.abs(x_slope);
    double step = x_slope / Math.abs(x_slope);
   
    // Add a mouse adapter to make the enemies go away after being click
    // also collects data on the number of total clicks
    public DrawEnemies(){
     addMouseListener(new MouseAdapter() {
          @Override
          public void mousePressed(MouseEvent me) {
               //If clicked, the enemy moves to (6000, 6000)
               enemy_x = 6000;
               enemy_y = 6000;
               metrics.m.mouseClicks++;
          }
        });
    }
    public void moveEnemy() {
        //This is to help speed up enemies with small slopes
        if (Math.abs(slope) < 0) {
            slope *= 1.5;
        }
       
        //If an enemy is sent to this location (see MouseAdapter), This player
        //correctly clicked the enemy
        if (enemy_x == 6000 && enemy_y == 6000){
            metrics.m.mouseCorrectClicks++;
        }
       
        //This moves the enemy to the center of the circle
        enemy_x += step;
        enemy_y += slope;
 
        //These if else statements evaulate if an enemy has reached the
        //center of the circle.  If so, the enemy has prevailed and is sent to
        // (-6000, -6000)
        boolean enemyWon = false;
        if (x_slope < 0) {
            if (enemy_x < 302) {
                enemyWon = true;
            }
        } else {
            if (enemy_x > 292) {
                enemyWon = true;
            }
        }
        if (y_slope < 0) {
            if (enemy_y < 291) {
                enemyWon = true;               
            }
        } else {
            if (enemy_y > 281) {
                enemyWon = true;               
            }           
        }
        if (enemyWon) {
            x = -6000;
            y = -6000;
            metrics.m.enemiesPrevailed++;
        }
       
        setBounds((int)enemy_x, (int)enemy_y, (int)enemy_x+10, (int)enemy_y+10);
    }
    // Here, we paint the enemy
    @Override
    public void paint(Graphics g){
        Graphics2D g2 = (Graphics2D) g;
        Color purple = new Color(150, 0, 150);
        g2.setColor(purple);
        Shape rect1 = new Rectangle2D.Double(0, 0, 10, 10);
        g2.fill(rect1);
    }
}
 
// This is the main method of the project and is where all the magic happens
public class GameLevel1 extends JComponent{
  
    public static void main(String[] args) throws InterruptedException, IOException {
        //getting the start time
        metrics.m.startTime(System.nanoTime());
       
        //connect to the client
        client_connect cn = new client_connect();
        String hostName = args[0];
        int portNumber = Integer.parseInt(args[1]);
        cn.server(hostName, portNumber);
        
        Timer time = new Timer();
       
        //create a canvas to display our game
        JFrame frame = new JFrame("Internship Game");
       
        // add playingfield and establish settings
        frame.add(DrawPlayingField.playingfield);
        frame.setSize(600, 600);
        frame.setVisible(true);
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        DrawPlayingField.playingfield.repaint();
      
        // We thread the enemies so we can have multiple moving graphics
        class thread extends Thread {
            @Override
            public void run() {
                // In this for loop, 2 is a random number.  It can be changed to
                //up the intensity of the game
                for (int u = 0; u <= 2; u++) {
                    // Adding the enemies
                    DrawEnemies enemy = new DrawEnemies();
                    frame.add(enemy);
                    for (int t = 0; t <= 300; t++) {
                        //moving the enemy
                        enemy.moveEnemy();
                       enemy.repaint();
                        try {
                            //number here can be changed to alter the speed of the enemy. Lower it to
                            //increase speed, increase it to decrease speed
                            Thread.sleep(500);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        if (t == 300) {
                            //after awhile, frame removes enemy
                            frame.remove(enemy);
                        }
                    }
                }
            }
        }
        // This timer periodically spawns new enemies, and updates the playingfield
        TimerTask spawnMultiple = new TimerTask() {
            @Override
            public void run() {
                thread thread = new thread();
                thread.start();
                DrawPlayingField.playingfield.change_XY(cn.x, cn.y);
                DrawPlayingField.playingfield.repaint();
                //The graphics freeze if you dont change the setSize()
                frame.setSize(601, 600);
                frame.setSize(600, 600);
                metrics.m.mouseIncorrectClicks = metrics.m.mouseClicks - metrics.m.mouseCorrectClicks;
            }};
        time.scheduleAtFixedRate(spawnMultiple, 100, 400);
    }
}
